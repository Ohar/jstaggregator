
  /** This character denotes the end of file */
  var YYEOF = -1;

  /** initial size of the lookahead buffer */
--- private static final int ZZ_BUFFERSIZE = ...;

  /** lexical states */
---  lexical states, charmap

  /* error codes */
  var ZZ_UNKNOWN_ERROR = 0;
  var ZZ_NO_MATCH = 1;
  var ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  var ZZ_ERROR_MSG = [
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  ];

--- isFinal list
  /** the input device */
  var zzReader;

  /** the current state of the DFA */
  var zzState = 0;

  /** the current lexical state */
  var zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  var zzBuffer = new Array(ZZ_BUFFERSIZE);

  /** the textposition at the last accepting state */
  var zzMarkedPos = 0;

  /** the current text position in the buffer */
  var zzCurrentPos = 0;

  /** startRead marks the beginning of the yytext() string in the buffer */
  var zzStartRead = 0;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  var zzEndRead = 0;

  /** number of newlines encountered up to the start of the matched text */
  var yyline = 0;

  /** the number of characters up to the start of the matched text */
  var yychar = 0;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  var yycolumn = 0;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  var zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  var zzAtEOF = false;

  /** denotes if the user-EOF-code has already been executed */
  var zzEOFDone = false;

--- user class code

  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
--- constructor declaration


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  function zzRefill() {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      //System.arraycopy(zzBuffer, zzStartRead,
      //                 zzBuffer, 0,
      //                 zzEndRead-zzStartRead);

      var zzBuffer_s = zzBuffer.slice(zzStartRead, zzEndRead);
      zzBuffer = zzBuffer.slice(zzBuffer_s.length);
      zzBuffer = zzBuffer_s.concat(zzBuffer);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      throw "Fix me! zzRefill() blow zzBuffer -> need to be implemented ?";
      /* if not: blow it up */
      //char newBuffer[] = new char[zzCurrentPos*2];
      //System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      //zzBuffer = newBuffer;
      //zzBuffer[(zzCurrentPos*2) - 1] = undefined;
    }

    /* finally: fill the buffer with new input */
    var numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }

    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      var c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

  /**
   * Returns the text matched by the current regular expression.
   */
  this.yytext = function() {
    var buffer = zzBuffer.slice(zzStartRead, zzMarkedPos);
    return String.fromCharCode.apply(String, buffer);
    //return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the length of the matched text region.
   */
  function yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
--- zzScanError declaration
    var message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (err) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

--- throws clause
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
--- yypushback decl (contains zzScanError exception)
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


--- zzDoEOF
  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
--- yylex declaration
    var zzInput;
    var zzAction;

    // cached fields:
    var zzCurrentPosL;
    var zzMarkedPosL;
    var zzEndReadL = zzEndRead;
    var zzBufferL = zzBuffer;
    var zzCMapL = ZZ_CMAP;

--- local declarations

    while (true) {
      zzMarkedPosL = zzMarkedPos;

--- start admin (line, char, col count)
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
--- start admin (lexstate etc)

      zzForAction: {
        while (true) {
    
--- next input, line, col, char count, next transition, isFinal action
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
--- line count update
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
--- char count update

--- actions
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
--- eofvalue
          } 
          else {
--- no match
          }
      }
    }
  }

--- main

}